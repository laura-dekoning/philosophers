diff --git a/philo/Makefile b/philo/Makefile
index 8420908..bd214bb 100644
--- a/philo/Makefile
+++ b/philo/Makefile
 
 SRC_FILES		:=	main.c \
 					parser.c \
-					ft_atol.c \
+					ft_atoul.c \
 					ft_error.c \
 					print.c \
 					init.c \
diff --git a/philo/incl/errors.h b/philo/incl/errors.h
index b72222f..41baa54 100644
--- a/philo/incl/errors.h
+++ b/philo/incl/errors.h
 #ifndef ERRORS_H
 # define ERRORS_H
 
-# define NEGATIVE_ERR "Numbers can't be negative bro"
-# define TOO_BIG_ERR "Numbers can't be this big bro"
-# define NO_NUM_ERR "You have to give me numbers bro!"
-# define ARGS_ERR "This is not the right amount of arguments!"
-# define MALLOC_ERR "Something went wrong with malloc =("
-# define THREAD_ERR "Oh no, something went wrong while creating threads"
+# define TRUE 1
+# define FALSE 0
 
-typedef enum e_error 
-{
-	SUCCESS = 0,
-	ERROR = -1,
-	NO_NEG = -2,
-	TOO_BIG = -3,
-	NO_NUM = -4,
-	ARGS = -5,
-	MALLOC = -6,
-	THREAD_CREATE = -7,
-	THREAD_JOIN = -8,
-	MUTEX_INIT = -9
-} 	t_error;
+# define SUCCESS 0
+# define ERROR 1
+
+# define NO_NEG "Numbers can't be negative bro"
+# define TOO_BIG "Numbers can't be this big bro"
+# define NO_NUM "You have to give me numbers bro!"
+# define ARGS "This is not the right amount of arguments!"
+# define MALLOC "Something went wrong with malloc =("
+# define THREAD_CREATE "Oh no, something went wrong while creating threads."
+# define MUTEX_INIT "Mutex initialization went wrong."
+# define THREAD_JOIN "Joining threads didn't work appropriately."
 
 #endif
\ No newline at end of file
diff --git a/philo/incl/philo.h b/philo/incl/philo.h
index 0c6d9e2..06ea882 100644
--- a/philo/incl/philo.h
+++ b/philo/incl/philo.h
     # define PRINT_DIED(id) printf("%d %s\n", id, DIED)
 #endif
 
-int		ft_error(t_table *data, int flag);
-t_error	parse_input(t_table *table, int argc, char **argv);
-t_error	ft_atol(const char *str, size_t *num);
-t_error	init_table(t_table *table);
+int		ft_error(t_table *data, char *str);
+int		parse_input(t_table *table, int argc, char **argv);
+int		ft_atoul(const char *str, size_t *num);
+int		init_table(t_table *table);
 void	print_table(t_table *table);
 
 
diff --git a/philo/incl/structs.h b/philo/incl/structs.h
index 5e4a053..fdc281b 100644
--- a/philo/incl/structs.h
+++ b/philo/incl/structs.h
 # include <stdbool.h>
 # include <inttypes.h>
 
-
-typedef struct s_fork
-{
-	pthread_mutex_t	fork; //a fork is a mutex
-	int				fork_id;
-}					t_fork;
-
 typedef	struct s_table	t_table;
 
 /**
@@ -39,8 +32,8 @@ typedef struct s_philo
 	int		meals_counter;
 	size_t	last_meal_time; //time passed from last meal
 	bool	full;
-	t_fork	*left_fork;
-	t_fork	*right_fork;
+	pthread_mutex_t	*first_fork;
+	pthread_mutex_t	*second_fork;
 	t_table	*table;
 }			t_philo;
 
@@ -67,10 +60,11 @@ typedef	struct s_table
 	size_t		time_to_eat;
 	size_t		time_to_sleep;
 	size_t		meal_limit; // [5] || FLAG if -1
-	size_t		start_simulation; //when simulation is started
+	size_t		start_simulation; //time when simulation is started
 	size_t		end_simulation; //a philo dies or when all philos are full
+	bool		eat_limit;
 	bool		death;
-	t_fork		*forks; //array of forks
+	pthread_mutex_t		*forks; //array of forks
 	t_philo		*philos; //array of philos
 	pthread_t	*pt_id; // a philo is a thread, this is the philothread_id
 }				t_table;
diff --git a/philo/src/ft_atol.c b/philo/src/ft_atoul.c
similarity index 87%
rename from philo/src/ft_atol.c
rename to philo/src/ft_atoul.c
index bce7bdb..c711784 100644
--- a/philo/src/ft_atol.c
+++ b/philo/src/ft_atoul.c
@@ -1,12 +1,12 @@
 /* ************************************************************************** */
 /*                                                                            */
 /*                                                        ::::::::            */
-/*   ft_atol.c                                          :+:    :+:            */
+/*   ft_atoul.c                                         :+:    :+:            */
 	return (i);
 }
 
-static t_error valid_input(const char *str, const char **num_start)
+static int valid_input(const char *str, const char **num_start)
 {
 	while (*str == ' ' || (*str >= 9 && *str <= 13))
 		str++;
@@ -46,7 +46,7 @@ static t_error valid_input(const char *str, const char **num_start)
 }
 
 
-t_error	ft_atol(const char *str, size_t *num)
+int	ft_atoul(const char *str, size_t *num)
 {
 	size_t		number;
 	const char	*num_start;
diff --git a/philo/src/ft_error.c b/philo/src/ft_error.c
index c19ae5c..1d6002c 100644
--- a/philo/src/ft_error.c
+++ b/philo/src/ft_error.c
 
-int	ft_error(t_table *data, int flag)
+int	ft_error(t_table *data, char *str)
 {
-	char	*str;
-
-	str = NULL;
-	if (flag == TOO_BIG)
-		str = TOO_BIG_ERR;
-	else if (flag == NO_NEG)
-		str = NEGATIVE_ERR;
-	else if (flag == NO_NUM)
-		str = NO_NUM_ERR;
-	else if (flag == ARGS)
-		str = ARGS_ERR;
-	else if (flag == MALLOC)
-		str = MALLOC_ERR;
-	else if (flag == ERROR)
-	{
-		if (data)
-			free(data);
-		return (ERROR);		
-	}
 	printf(B_R"Error\n"DEF);
 	printf("%s\n", str);
 	if (data)
diff --git a/philo/src/init.c b/philo/src/init.c
index 709d865..45f8887 100644
--- a/philo/src/init.c
+++ b/philo/src/init.c
 	return (NULL);
 }
 
-t_error	init_forks(t_table *table)
+int	init_forks(t_table *table)
 {
 	int	i;
 
-	table->forks = (t_fork *)malloc(sizeof(t_fork) * table->philo_count);
+	table->forks = (pthread_mutex_t *)malloc(sizeof(pthread_mutex_t) * table->philo_count);
 	if (!table->forks)
-		return (MALLOC);
+		return (ft_error(table, MALLOC));
 	i = 0;
 	while (i < table->philo_count)
 	{
-		table->forks[i].fork_id = i;
-		if (pthread_mutex_init(&table->forks[i].fork, NULL) != SUCCESS)
-			return (MUTEX_INIT);
+		if (pthread_mutex_init(&table->forks[i], NULL) != SUCCESS)
+			return (ft_error(table, MUTEX_INIT));
 		i++;
 	}
 	return (SUCCESS);
 }
 
-void	assign_forks(t_philo *philo, t_fork *forks, int i)
+void	assign_forks(t_philo *philo, pthread_mutex_t *forks, int i)
 {
 	int	nbr_philos;
 
 	nbr_philos = philo->table->philo_count;
-	philo->left_fork = &forks[(i + 1) % nbr_philos];
-	philo->right_fork = &forks[i];
+	philo->first_fork = &forks[(i + 1) % nbr_philos];
+	philo->second_fork = &forks[i];
 	if (i % 2 == 0)
 	{
-		philo->right_fork = &forks[i];
-		philo->left_fork = &forks[(i + 1) % nbr_philos];
+		philo->first_fork = &forks[i];
+		philo->second_fork = &forks[(i + 1) % nbr_philos];
 	}
 }
 
 
-t_error	init_philos(t_table *table)
+int	init_philos(t_table *table)
 {
 	int		i;
 	t_philo	*philo;
 
 	table->philos = (t_philo *)malloc(sizeof(t_philo) * table->philo_count);
 	if (!table->philos)
-		return (MALLOC);
+		return (ft_error(table, MALLOC));
 	table->pt_id = (pthread_t *)malloc(sizeof(pthread_t) * table->philo_count);
 	if (!table->pt_id)
-		return (MALLOC);
+		return (ft_error(table, MALLOC));
 	i = 0;
 	while (i < table->philo_count)
 	{
@@ -82,32 +81,26 @@ t_error	init_philos(t_table *table)
 		if (pthread_create(table->pt_id[i], 0, philo_loop, &table->philos[i]) != SUCCESS)
 			return (i);
 		i++;
-
-	t_fork	*left_fork;
-	t_fork	*right_fork;
-
 	}
-	//if i == philo_count maak extra thread die monitor is die kijkt naar elke thread data
-	//kijkt of is DEAD. monitor_loop heeft toegang nodig tot philo info (table) 
-	if (i == table->philo_count)
-		pthread_create(something, 0, monitor_loop, &arg);
+
 	return (SUCCESS);
 }
+
 //figure out how you want to do the returns and error messages (where to free etc).
-t_error	init_table(t_table *table)
+int	init_table(t_table *table)
 {
-	t_error	retval;
+	int	retval;
 
 	retval = 0;
 	table->end_simulation = false;
-	retval = init_forks(table);
+	retval = inipthread_mutex_ts(table);
 	retval = init_philos(table);
-	if (retval != SUCCESS)
+	if (retval != table->philo_count)
 	{
 		while (retval > 0)
 		{
-			if (pthread_join(table->pt_id[retval], NULL) != SUCCESS);
-				return (THREAD_JOIN);
+			if (pthread_join(table->pt_id[retval], NULL) != SUCCESS)
+				return (ft_error(table, THREAD_JOIN));
 			retval--;
 		}
 	}
diff --git a/philo/src/main.c b/philo/src/main.c
index 3eab75d..dd1434c 100644
--- a/philo/src/main.c
+++ b/philo/src/main.c
 	if (argc != 5 && argc != 6)
 		return (ft_error(&table, ARGS));
 	if (parse_input(&table, argc, argv) != SUCCESS)
-		return (ft_error(&table, ERROR));
+		return (ERROR);
 	if (init_table(&table) != SUCCESS)
-		return (ft_error(&table, ERROR));
+		return (ERROR);
 	// dinner_start(&table);
 	// clean_table(&table);
 
diff --git a/philo/src/parser.c b/philo/src/parser.c
index 0e8424d..2c84091 100644
--- a/philo/src/parser.c
+++ b/philo/src/parser.c
 
-t_error	parse_input(t_table *table, int argc, char **argv)
+int	parse_input(t_table *table, int argc, char **argv)
 {
-	 if (ft_atol(argv[1], &table->philo_count) != SUCCESS)
+	 if (ft_atoul(argv[1], &table->philo_count) != SUCCESS)
 	 	return (ERROR);
-	 if (ft_atol(argv[2], &table->time_to_die) != SUCCESS)
+	 if (ft_atoul(argv[2], &table->time_to_die) != SUCCESS)
 	 	return (ERROR);
-	 if (ft_atol(argv[3], &table->time_to_eat) != SUCCESS)
+	 if (ft_atoul(argv[3], &table->time_to_eat) != SUCCESS)
 	 	return (ERROR);
-	 if (ft_atol(argv[4], &table->time_to_sleep) != SUCCESS)
+	 if (ft_atoul(argv[4], &table->time_to_sleep) != SUCCESS)
 	 	return (ERROR);
 	if (argc == 6)
 	{
-		if (ft_atol(argv[5], &table->meal_limit) != SUCCESS)
+		table->eat_limit = true;
+		if (ft_atoul(argv[5], &table->meal_limit) != SUCCESS)
 			return (ERROR);
 	}
 	else
diff --git a/philo/staged_diff_output.txt b/philo/staged_diff_output.txt
index 981e4cc..fc8a1aa 100644
--- a/philo/staged_diff_output.txt
+++ b/philo/staged_diff_output.txt
@@ -93,7 +93,7 @@ index b8b7eb9..eba4513 100644
  # define SUCCESS 0
  
 +# define ARGS_ERROR -1
-+# define INT_ERROR -2
++# define INint -2
  
 -# define ARGS 1
  
@@ -140,7 +140,7 @@ index ffa75fb..83464f0 100644
 -	int	eat_count;
 +	t_mutex	fork; //a fork is a mutex
 +	int		fork_id;
-+}	t_fork;
++}	pthread_mutex_t;
  
 -}	t_data;
 +/**
@@ -168,7 +168,7 @@ index ffa75fb..83464f0 100644
 +	size_t		meal_limit; // [5] || FLAG if -1
 +	size_t		start_simulation; //when simulation is started
 +	size_t		end_simulation; //a philo dies or when all philos are full
-+	t_fork		*forks; //array of forks
++	pthread_mutex_t		*forks; //array of forks
 +	t_philo		*philos; //array of philos
 +	pthread_t	thread_id; // a philo is a thread
 +}	t_table;
@@ -186,8 +186,8 @@ index ffa75fb..83464f0 100644
 +	int		meals_counter;
 +	size_t	last_meal_time; //time passed from last meal
 +	bool	full;
-+	t_fork	*left_fork;
-+	t_fork	*right_fork;
++	pthread_mutex_t	*left_fork;
++	pthread_mutex_t	*right_fork;
 +	t_table	*table;
 +}	t_philo;
  
@@ -317,7 +317,7 @@ index 7aacca8..3870cb6 100644
 -	return (data);
 +		table->meal_limit = ft_atol(argv[4]);
 +	if (check_data(table) == ERROR)
-+		return (error_exit(table, INT_ERROR));
++		return (error_exit(table, INint));
 +	return (table);
  }
 diff --git a/philo/src/main.c b/philo/src/main.c
diff --git a/staged_diff_output.txt b/staged_diff_output.txt
new file mode 100644
index 0000000..7285df2
--- /dev/null
+++ b/staged_diff_output.txt
@@ -0,0 +1,499 @@
+diff --git a/philo/Makefile b/philo/Makefile
+index 8420908..0efa3a1 100644
+--- a/philo/Makefile
++++ b/philo/Mak@@ SRC_DIR			:=	src
+ 
+ SRC_FILES		:=	main.c \
+ 					parser.c \
+-					ft_atol.c \
+-					ft_error.c \
++					ft_atoul.c \
++					ft_error.c \
+ 					print.c \
+ 					init.c \
+ 
+diff --git a/philo/incl/errors.h b/philo/incl/errors.h
+index b72222f..41baa54 100644
+--- a/philo/incl/errors.h
++++ b/philo/inc9 @@
+ #ifndef ERRORS_H
+ # define ERRORS_H
+ 
+-# define NEGATIVE_ERR "Numbers can't be negative bro"
+-# define TOO_BIG_ERR "Numbers can't be this big bro"
+-# define NO_NUM_ERR "You have to give me numbers bro!"
+-# define ARGS_ERR "This is not the right amount of arguments!"
+-# define MALLOC_ERR "Something went wrong with malloc =("
+-# define THREAD_ERR "Oh no, something went wrong while creating threads"
++# define TRUE 1
++# define FALSE 0
+ 
+-typedef enum e_error 
+-{
+-	SUCCESS = 0,
+-	ERROR = -1,
+-	NO_NEG = -2,
+-	TOO_BIG = -3,
+-	NO_NUM = -4,
+-	ARGS = -5,
+-	MALLOC = -6,
+-	THREAD_CREATE = -7,
+-	THREAD_JOIN = -8,
+-	MUTEX_INIT = -9
+-} 	t_error;
++# define SUCCESS 0
++# define ERROR 1
++
++# define NO_NEG "Numbers can't be negative bro"
++# define TOO_BIG "Numbers can't be this big bro"
++# define NO_NUM "You have to give me numbers bro!"
++# define ARGS "This is not the right amount of arguments!"
++# define MALLOC "Something went wrong with malloc =("
++# define THREAD_CREATE "Oh no, something went wrong while creating threads."
++# define MUTEX_INIT "Mutex initialization went wrong."
++# define THREAD_JOIN "Joining threads didn't work appropriately."
+ 
+ #endif
+\ No newline at end of file
+diff --git a/philo/incl/philo.h b/philo/incl/philo.h
+index 0c6d9e2..06ea882 100644
+--- a/philo/incl/philo.h
++++ b/philo/inc0 @@ with a mutex for each of them.*/
+     # define PRINT_DIED(id) printf("%d %s\n", id, DIED)
+ #endif
+ 
+-int		ft_error(t_table *data, int flag);
+-t_error	parse_input(t_table *table, int argc, char **argv);
+-t_error	ft_atol(const char *str, size_t *num);
+-t_error	init_table(t_table *table);
++int		ft_error(t_table *data, char *str);
++int		parse_input(t_table *table, int argc, char **argv);
++int		ft_atoul(const char *str, size_t *num);
++int		init_table(t_table *table);
+ void	print_table(t_table *table);
+ 
+ 
+diff --git a/philo/incl/structs.h b/philo/incl/structs.h
+index 5e4a053..fdc281b 100644
+--- a/philo/incl/structs.h
++++ b/philo/inc @@
+ # include <stdbool.h>
+ # include <inttypes.h>
+ 
+-
+-typedef struct s_fork
+-{
+-	pthread_mutex_t	fork; //a fork is a mutex
+-	int				fork_id;
+-}					t_fork;
+-
+ typedef	struct s_table	t_table;
+ 
+ /**
+@@ -39,8 +32,8 @@ typedef struct s_philo
+ 	int		meals_counter;
+ 	size_t	last_meal_time; //time passed from last meal
+ 	bool	full;
+-	t_fork	*left_fork;
+-	t_fork	*right_fork;
++	pthread_mutex_t	*first_fork;
++	pthread_mutex_t	*second_fork;
+ 	t_table	*table;
+ }			t_philo;
+ 
+@@ -67,10 +60,11 @@ typedef	struct s_table
+ 	size_t		time_to_eat;
+ 	size_t		time_to_sleep;
+ 	size_t		meal_limit; // [5] || FLAG if -1
+-	size_t		start_simulation; //when simulation is started
++	size_t		start_simulation; //time when simulation is started
+ 	size_t		end_simulation; //a philo dies or when all philos are full
++	bool		eat_limit;
+ 	bool		death;
+-	t_fork		*forks; //array of forks
++	pthread_mutex_t		*forks; //array of forks
+ 	t_philo		*philos; //array of philos
+ 	pthread_t	*pt_id; // a philo is a thread, this is the philothread_id
+ }				t_table;
+diff --git a/philo/src/ft_atol.c b/philo/src/ft_atoul.c
+similarity index 79%
+rename from philo/src/ft_atol.c
+rename to philo/src/ft_atoul.c
+index bce7bdb..1a8e1b3 100644
+--- a/philo/src/ft_atol.c
++++ b/philo/src/ft_atoul.c
+@@ -1,12 +1,12 @@
+ /* ************************************************************************** */
+ /*                                                                            */
+ /*                                                        ::::::::            */
+-/*   ft_atol.c                                          :+:    :+:            */
++/*   ft_atoul.c                                         :+:    :+:            */
+ 	return (i);
+ }
+ 
+-static t_error valid_input(const char *str, const char **num_start)
++static int valid_input(const char *str, const char **num_start)
+ {
+ 	while (*str == ' ' || (*str >= 9 && *str <= 13))
+ 		str++;
+ 	if (*str == '+')
+ 		str++;
+ 	else if (*str == '-')
+-		return (ft_error(NULL, NO_NEG));
++		return (ft_error(NULL, NO_NEG));
+ 	if (ft_isdigit(*str) == false)
+-		return (ft_error(NULL, NO_NUM));
++		return (ft_error(NULL, NO_NUM));
+ 	if (ft_numlen(str) > 10)
+-		return (ft_error(NULL, TOO_BIG));
++		return (ft_error(NULL, TOO_BIG));
+ 	*num_start = str;
+ 	return (SUCCESS);
+ }
+ 
+ 
+-t_error	ft_atol(const char *str, size_t *num)
++int	ft_atoul(const char *str, size_t *num)
+ {
+ 	size_t		number;
+ 	const char	*num_start;
+@@ -63,7 +63,7 @@ t_error	ft_atol(const char *str, size_t *num)
+ 		str++;
+ 	}
+ 	if (number > INT_MAX)
+-		return (ft_error(NULL, TOO_BIG));
++		return (ft_error(NULL, TOO_BIG));
+ 	*num = number;
+ 	return (SUCCESS);
+ }
+diff --git a/philo/src/ft_error.c b/philo/src/ft_error.c
+index c19ae5c..799f401 100644
+--- a/philo/src/ft_error.c
++++ b/philo/src/ft_error.c
+@@ -1,38 +1,19 @@
+ /* ************************************************************************** */
+ /*                                                                            */
+ /*                                                        ::::::::            */
+-/*   ft_error.c                                         :+:    :+:            */
++/*   ft_error.c                                         :+:    :+:            */
+ 
+-int	ft_error(t_table *data, int flag)
++int	ft_error(t_table *data, char *str)
+ {
+-	char	*str;
+-
+-	str = NULL;
+-	if (flag == TOO_BIG)
+-		str = TOO_BIG_ERR;
+-	else if (flag == NO_NEG)
+-		str = NEGATIVE_ERR;
+-	else if (flag == NO_NUM)
+-		str = NO_NUM_ERR;
+-	else if (flag == ARGS)
+-		str = ARGS_ERR;
+-	else if (flag == MALLOC)
+-		str = MALLOC_ERR;
+-	else if (flag == ERROR)
+-	{
+-		if (data)
+-			free(data);
+-		return (ERROR);		
+-	}
+ 	printf(B_R"Error\n"DEF);
+ 	printf("%s\n", str);
+ 	if (data)
+diff --git a/philo/src/init.c b/philo/src/init.c
+index 709d865..565d235 100644
+--- a/philo/src/init.c
++++ b/philo/src9 @@ void	*philo_loop(void *arg)
+ 	return (NULL);
+ }
+ 
+-t_error	init_forks(t_table *table)
++int	init_forks(t_table *table)
+ {
+ 	int	i;
+ 
+-	table->forks = (t_fork *)malloc(sizeof(t_fork) * table->philo_count);
++	table->forks = (pthread_mutex_t *)malloc(sizeof(pthread_mutex_t) * table->philo_count);
+ 	if (!table->forks)
+-		return (MALLOC);
++		return (ft_error(table, MALLOC));
+ 	i = 0;
+ 	while (i < table->philo_count)
+ 	{
+-		table->forks[i].fork_id = i;
+-		if (pthread_mutex_init(&table->forks[i].fork, NULL) != SUCCESS)
+-			return (MUTEX_INIT);
++		if (pthread_mutex_init(&table->forks[i], NULL) != SUCCESS)
++			return (ft_error(table, MUTEX_INIT));
+ 		i++;
+ 	}
+ 	return (SUCCESS);
+ }
+ 
+-void	assign_forks(t_philo *philo, t_fork *forks, int i)
++void	assign_forks(t_philo *philo, pthread_mutex_t *forks, int i)
+ {
+ 	int	nbr_philos;
+ 
+ 	nbr_philos = philo->table->philo_count;
+-	philo->left_fork = &forks[(i + 1) % nbr_philos];
+-	philo->right_fork = &forks[i];
++	philo->first_fork = &forks[(i + 1) % nbr_philos];
++	philo->second_fork = &forks[i];
+ 	if (i % 2 == 0)
+ 	{
+-		philo->right_fork = &forks[i];
+-		philo->left_fork = &forks[(i + 1) % nbr_philos];
++		philo->first_fork = &forks[i];
++		philo->second_fork = &forks[(i + 1) % nbr_philos];
+ 	}
+ }
+ 
+ 
+-t_error	init_philos(t_table *table)
++int	init_philos(t_table *table)
+ {
+ 	int		i;
+ 	t_philo	*philo;
+ 
+ 	table->philos = (t_philo *)malloc(sizeof(t_philo) * table->philo_count);
+ 	if (!table->philos)
+-		return (MALLOC);
++		return (ft_error(table, MALLOC));
+ 	table->pt_id = (pthread_t *)malloc(sizeof(pthread_t) * table->philo_count);
+ 	if (!table->pt_id)
+-		return (MALLOC);
++		return (ft_error(table, MALLOC));
+ 	i = 0;
+ 	while (i < table->philo_count)
+ 	{
+@@ -82,32 +81,26 @@ t_error	init_philos(t_table *table)
+ 		if (pthread_create(table->pt_id[i], 0, philo_loop, &table->philos[i]) != SUCCESS)
+ 			return (i);
+ 		i++;
+-
+-	t_fork	*left_fork;
+-	t_fork	*right_fork;
+-
+ 	}
+-	//if i == philo_count maak extra thread die monitor is die kijkt naar elke thread data
+-	//kijkt of is DEAD. monitor_loop heeft toegang nodig tot philo info (table) 
+-	if (i == table->philo_count)
+-		pthread_create(something, 0, monitor_loop, &arg);
++
+ 	return (SUCCESS);
+ }
++
+ //figure out how you want to do the returns and error messages (where to free etc).
+-t_error	init_table(t_table *table)
++int	init_table(t_table *table)
+ {
+-	t_error	retval;
++	int	retval;
+ 
+ 	retval = 0;
+ 	table->end_simulation = false;
+-	retval = init_forks(table);
++	retval = inipthread_mutex_ts(table);
+ 	retval = init_philos(table);
+-	if (retval != SUCCESS)
++	if (retval != table->philo_count)
+ 	{
+ 		while (retval > 0)
+ 		{
+-			if (pthread_join(table->pt_id[retval], NULL) != SUCCESS);
+-				return (THREAD_JOIN);
++			if (pthread_join(table->pt_id[retval], NULL) != SUCCESS)
++				return (ft_error(table, THREAD_JOIN));
+ 			retval--;
+ 		}
+ 	}
+diff --git a/philo/src/main.c b/philo/src/main.c
+index 3eab75d..628e581 100644
+--- a/philo/src/main.c
++++ b/philo/src1 @@ int	main(int argc, char **argv)
+ 
+ 	memset(&table, 0, sizeof(t_table));
+ 	if (argc != 5 && argc != 6)
+-		return (ft_error(&table, ARGS));
++		return (ft_error(&table, ARGS));
+ 	if (parse_input(&table, argc, argv) != SUCCESS)
+-		return (ft_error(&table, ERROR));
++		return (ERROR);
+ 	if (init_table(&table) != SUCCESS)
+-		return (ft_error(&table, ERROR));
++		return (ERROR);
+ 	// dinner_start(&table);
+ 	// clean_table(&table);
+ 
+diff --git a/philo/src/parser.c b/philo/src/parser.c
+index 0e8424d..2c84091 100644
+--- a/philo/src/parser.c
++++ b/philo/src/ph"
+ 
+-t_error	parse_input(t_table *table, int argc, char **argv)
++int	parse_input(t_table *table, int argc, char **argv)
+ {
+-	 if (ft_atol(argv[1], &table->philo_count) != SUCCESS)
++	 if (ft_atoul(argv[1], &table->philo_count) != SUCCESS)
+ 	 	return (ERROR);
+-	 if (ft_atol(argv[2], &table->time_to_die) != SUCCESS)
++	 if (ft_atoul(argv[2], &table->time_to_die) != SUCCESS)
+ 	 	return (ERROR);
+-	 if (ft_atol(argv[3], &table->time_to_eat) != SUCCESS)
++	 if (ft_atoul(argv[3], &table->time_to_eat) != SUCCESS)
+ 	 	return (ERROR);
+-	 if (ft_atol(argv[4], &table->time_to_sleep) != SUCCESS)
++	 if (ft_atoul(argv[4], &table->time_to_sleep) != SUCCESS)
+ 	 	return (ERROR);
+ 	if (argc == 6)
+ 	{
+-		if (ft_atol(argv[5], &table->meal_limit) != SUCCESS)
++		table->eat_limit = true;
++		if (ft_atoul(argv[5], &table->meal_limit) != SUCCESS)
+ 			return (ERROR);
+ 	}
+ 	else
+diff --git a/philo/staged_diff_output.txt b/philo/staged_diff_output.txt
+index 981e4cc..fc8a1aa 100644
+--- a/philo/staged_diff_output.txt
++++ b/philo/staged_diff_output.txt
+@@ -93,7 +93,7 @@ index b8b7eb9..eba4513 100644
+  # define SUCCESS 0
+  
+ +# define ARGS_ERROR -1
+-+# define INT_ERROR -2
+++# define INint -2
+  
+ -# define ARGS 1
+  
+@@ -140,7 +140,7 @@ index ffa75fb..83464f0 100644
+ -	int	eat_count;
+ +	t_mutex	fork; //a fork is a mutex
+ +	int		fork_id;
+-+}	t_fork;
+++}	pthread_mutex_t;
+  
+ -}	t_data;
+ +/**
+@@ -168,7 +168,7 @@ index ffa75fb..83464f0 100644
+ +	size_t		meal_limit; // [5] || FLAG if -1
+ +	size_t		start_simulation; //when simulation is started
+ +	size_t		end_simulation; //a philo dies or when all philos are full
+-+	t_fork		*forks; //array of forks
+++	pthread_mutex_t		*forks; //array of forks
+ +	t_philo		*philos; //array of philos
+ +	pthread_t	thread_id; // a philo is a thread
+ +}	t_table;
+@@ -186,8 +186,8 @@ index ffa75fb..83464f0 100644
+ +	int		meals_counter;
+ +	size_t	last_meal_time; //time passed from last meal
+ +	bool	full;
+-+	t_fork	*left_fork;
+-+	t_fork	*right_fork;
+++	pthread_mutex_t	*left_fork;
+++	pthread_mutex_t	*right_fork;
+ +	t_table	*table;
+ +}	t_philo;
+  
+@@ -317,7 +317,7 @@ index 7aacca8..3870cb6 100644
+ -	return (data);
+ +		table->meal_limit = ft_atol(argv[4]);
+ +	if (check_data(table) == ERROR)
+-+		return (error_exit(table, INT_ERROR));
+++		return (error_exit(table, INint));
+ +	return (table);
+  }
+ diff --git a/philo/src/main.c b/philo/src/main.c
